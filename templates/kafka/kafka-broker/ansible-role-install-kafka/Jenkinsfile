pipeline {
    agent any

    parameters {
        string(name: 'SERVERS', defaultValue: ' ')
        string(name: 'ZOOKEEPER_PARAMETERS')
        string(name: 'BROKER_PARAMETERS')
    }

    stages {
        stage('Load Kafka_Broker') {
            steps {
              script {

//Read keyfile.txt and add values to mylistkey
                echo "Read key file"
                def mylistkey = []
                def filePath = readFile "templates/kafka/kafka-broker/ansible-role-install-kafka/keyfile.txt"
                def keyfile = filePath.readLines()

                for (key in keyfile) {
                  mylistkey.add(key)
                }
//Add parameters from main Jenkinsfile
                echo "Running broker deploy"
                def server_arr = "${SERVERS}".split(",")
                def zookeeper_parameters = "${ZOOKEEPER_PARAMETERS}".split(",").join(",")
                def broker_parameters = "${BROKER_PARAMETERS}".split(",")
                def mylistvalue = []
//Add user values to mylistvalue
                for (i in broker_parameters ) {
                  mylistvalue.add(i)
                }

//Create MAP where key=mylistkey valu=mylistvalue
                def values = [mylistkey,mylistvalue].transpose().collectEntries{[it[0],it[1]]} //user enter parameters -> type MAP
                println  "{mylistkey - > $mylistkey}"
                println  "{mylistvalue - > $mylistvalue}"
                println  "{dictvalues - > $values}"

                println  "{values.container_name - > $values.container_name}"

//Set default values
                if ("$values.container_name" == null) {
                    values.container_name = 'kafka1-1'
                    println  "{default values.container_name - > $values.container_name}"
                }

                if ("$values.kafka_dns_name" == null) {
                    values.kafka_dns_name == 'kafka1-1.net'
                }

                if (values.port_internal == null) {
                    values.port_internal == '9092'
                }

//Send values to Ansible
                  ansiblePlaybook (
                    playbook: 'templates/kafka/kafka-broker/playbook.yml',
                    inventoryContent: "by-kafka1-vm-1-vpn.spnode.net",
                    disableHostKeyChecking: true,
                    extraVars: [
                      container_name: "$values.container_name",
                      kafka_dns_name: "$values.kafka_dns_name",
//vars for docker file (IP SECTION IN DOCKER TEMPLATE)
                      port_internal: "$values.port_internal",
                      ip_internal:  "$values.ip_internal",
                      port_external: "$values.port_external",
                      ip_external:  "$values.ip_external",
                      port_monitoring: "$values.port_monitoring",
                      ip_monitoring: "$values.ip_monitoring",
//vars for docker file (BROKER SECTION IN DOCKER TEMPLATE)
                      broker_id: "$values.broker_id",
                      kafka_heap_opts: "$values.kafka_heap_opts",
//vars for docker file (BROKER SECTION IN CLUSTER CONFIGS)
                      kafka_default_replication_factor: "$values.kafka_default_replication_factor",
                      kafka_offsets_topic_replication_factor: "$values.kafka_offsets_topic_replication_factor",
                      kafka_min_insync_replicas: "$values.kafka_min_insync_replicas",
                      kafka_transaction_state_log_min_isr: "$values.kafka_transaction_state_log_min_isr",
                      kafka_transaction_state_log_replication_factor: "$values.kafka_transaction_state_log_replication_factor",
//vars for docker file (CONNECT CONFIG SECTION IN DOCKER TEMPLATE)
                      kafka_zookeeper_connect: "$zookeeper_parameters"
                  ]
                )
              }
            }
        }
    }
}

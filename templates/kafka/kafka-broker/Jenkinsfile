pipeline {
    agent any

    parameters {
        string(name: 'DEPENDENCIES', defaultValue: ' ')
        string(name: 'SERVERS', defaultValue: ' ')
        string(name: 'BROKER_PARAMETERS', defaultValue: ' ')
        string(name: 'VALUE_LIST', defaultValue: ' ')
    }

    stages {
        stage('Load Kafka_Broker') {
            steps {
              script {
                def mylistkey = [
                "container_name",
                "kafka_dns_name",
                "ip_internal",
                "ip_external",
                "ip_monitoring",
                "broker_id",
                "kafka_heap_opts",
                "kafka_zookeeper_connect",
                "kafka_zookeeper_ssl_keystore_location",
                "kafka_zookeeper_ssl_keystore_password",
                "kafka_zookeeper_ssl_key_password",
                "kafka_zookeeper_ssl_truststore_location",
                "kafka_zookeeper_ssl_truststore_password",
                "kafka_replica_fetch_max_bytes",
                "kafka_message_max_bytes",
                "kafka_log_retention_hours",
                "kafka_controller_socket_timeout_ms",
                "kafka_connection_setup_teimeout_max_ms",
                "kafka_request_timeout_ms",
                "kafka_ssl_keystore_filename",
                "kafka_ssl_pass_file",
                "kafka_ssl_truststore_filename",
                "kafka_ssl_secrets_dir",
                "kafka_auto_leader_rebalance_enable",
                "kafka_default_replication_factor",
                "kafka_offsets_topic_replication_factor",
                "kafka_min_insync_replicas",
                "kafka_transaction_state_log_min_isr",
                "kafka_transaction_state_log_replication_factor"
                ]
                echo "Running broker deploy"
                def dependencies_arr = "${DEPENDENCIES}".split(",")
                def server_arr = "${SERVERS}".split(",")
                def broker_parameters = "${BROKER_PARAMETERS}".split(",")
                def mylistvalue = []

                for (i in broker_parameters ) {
                  mylistvalue.add(i)
                }

                def values = [mylistkey,mylistvalue].transpose().collectEntries{[it[0],it[1]]} //user enter parameters -> type MAP
                println  "{$values}"

                ansiblePlaybook (
                  playbook: "templates/kafka/kafka-broker/playbook.yml",
                  limit: "kafka",
                  credentialsId: "m.peshko",
                  inventory: "templates/kafka/kafka-broker/inventories/hosts.yaml",
                  extraVars: [
                      broker_id: "1"
                  ]
                )

              }
            }
        }
    }
}

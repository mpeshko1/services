pipeline {
    agent any

    parameters {
        string(name: 'DEPENDENCIES', defaultValue: ' ')
        string(name: 'SERVERS', defaultValue: ' ')
        string(name: 'BROKER_PARAMETERS')
    }

    stages {
        stage('Load Kafka_Broker') {
            steps {
              script {

//Read keyfile.txt and add values to mylistkey
                echo "Read key file"
                def mylistkey = []
                def filePath = readFile "templates/kafka/kafka-broker/keyfile.txt"
                def keyfile = filePath.readLines()

                for (key in keyfile) {
                  mylistkey.add(key)
                }
//Add parameters from main Jenkinsfile
                echo "Running broker deploy"
                def dependencies_arr = "${DEPENDENCIES}".split(",")
                def server_arr = "${SERVERS}".split(",")
                def broker_parameters = "${BROKER_PARAMETERS}".split(",")
                def mylistvalue = []
//Add user values to mylistvalue
                for (i in broker_parameters ) {
                  mylistvalue.add(i)
                }
//Create MAP where key=mylistkey valu=mylistvalue
                def values = [mylistkey,mylistvalue].transpose().collectEntries{[it[0],it[1]]} //user enter parameters -> type MAP
                println  "{mylistkey - > $mylistkey}"
                println  "{mylistvalue - > $mylistvalue}"
                println  "{values - > $values}"


//Send values to Ansible
                  ansiblePlaybook (
                    playbook: 'templates/kafka/kafka-broker/playbook.yml',
                    inventoryContent: "by-kafka1-vm-1-vpn.spnode.net",
                    disableHostKeyChecking: true,
                    extraVars: [
                      container_name: "{{ $values.container_name | default('kafka1-1') }}",
                      kafka_dns_name: "{{ $values.kafka_dns_name | default('kafka1-1.net') }}",
  //vars for docker file (IP SECTION IN DOCKER TEMPLATE)
                      port_internal: "{{ $values.port_internal | default('9092') }}",
                      ip_internal:  "{{ $values.ip_internal | default('172.17.0.1') }}",
                      port_external: "{{ $values.port_external | default('29092') }}",
                      ip_external:  "{{ $values.ip_external | default('172.17.0.1') }}",
                      port_monitoring: "{{ $values.port_monitoring | default('9201') }}",
                      ip_monitoring: "{{ $values.ip_monitoring | default('172.17.0.1') }}",
//   //vars for docker file (BROKER SECTION IN DOCKER TEMPLATE)
                      broker_id: "{{ $values.broker_id | default('1') }}",
                      kafka_heap_opts: "{{ $values.kafka_heap_opts | default('10') }}",
//   //vars for docker file (CONNECT CONFIG SECTION IN DOCKER TEMPLATE)
                      kafka_zookeeper_connect: "{{ $values.kafka_zookeeper_connect | default('172.17.0.1:2281') }}",
//   //vars for docker file (CONFIG PARAMETERS SECTION IN DOCKER TEMPLATE)
                      kafka_replica_fetch_max_bytes: "{{ $values.kafka_replica_fetch_max_bytes | default('20000000') }}",
                      kafka_message_max_bytes: "{{ $values.kafka_message_max_bytes | default('20000000') }}",
                      kafka_log_retention_hours: "{{ $values.kafka_log_retention_hours | default('168') }}",
                      kafka_controller_socket_timeout_ms: "{{ $values.kafka_controller_socket_timeout_ms | default('60000') }}",
                      kafka_connection_setup_teimeout_max_ms: "{{ $values.kafka_connection_setup_teimeout_max_ms | default('40000') }}",
                      kafka_request_timeout_ms: "{{ $values.kafka_request_timeout_ms | default('60000') }}"
                  ]
                )
              }
            }
        }
    }
}
